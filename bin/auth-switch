#!/bin/bash
#
# auth-switch
#
# author: dooley@tacc.utexas.edu, vaughn@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It non-destructively swaps among tenants/usernames configurations
# to support users who need to change contexts often


DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# set to 1 to prevent using cache. token creation requires a valid key
savechanges=0

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=()

# Print usage
usage() {
  echo -n "$(basename $0) [OPTIONS]...

Switch between API clients with the given values. For ease of use,
one can try to automatically refresh or create new tokens with the newly
activated API by passing the appropriate flag. If no options are passed
auth-switch will display a list of known configurations. 

 Options:
  -u, --username        Tenant-specific username to switch to
  -t, --tenantid        Tenant to switch to (e.g. iplantc.org)
  -r, --refresh         Attempt to refresh access token after switching
  -c, --create          Attempt to create a new token after switching
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/auth-common.sh"

list_kv_stores(){

  stores=$(cd $AGAVE_CACHE_DIR && find * -type f -name "*current${delim}*" | uniq | sort -k1)
  rec="| tenant | username | | ------ | -------- | "

  for S in $stores
  do
    tenant=$(awk -F ${delim} '{print $2}' <<< $S)
    username=$(awk -F ${delim} '{print $3}' <<< $S)
    rec="${rec}| $tenant | $username | "
  done
  columnize "${rec}"
  exit 0

}

switch_kv_current(){

  local switch_user=$1
  local switch_tenant=$2

  local current_cache=$(kvget current)
  local current_user=$(jsonquery "$current_cache" "username")
  local current_tenantid=$(jsonquery "$current_cache" "tenantid")

  local kv_store_cachename="${current_tenantid}${delim}${current_user}"
  local kv_store_switchname="${switch_tenantid}${delim}${switch_user}"

  cp -f "$AGAVE_CACHE_DIR/current" "$AGAVE_CACHE_DIR/current${delim}${kv_store_cachename}"
  if [ -f "$AGAVE_CACHE_DIR/current${delim}${kv_store_switchname}" ]
  then
    cp -f "$AGAVE_CACHE_DIR/current${delim}${kv_store_switchname}" "$AGAVE_CACHE_DIR/.agave/current"
  else
    echo "Unable to find stored configuration for ${switch_tenantid}:${switch_user} in $AGAVE_CACHE_DIR"
    exit 1
  fi

  # TODO - pass -q, -V, -v flags
  if ((refresh)); then
    $DIR/auth-tokens-refresh -S
  elif ((create)); then
    $DIR/auth-tokens-create -S
  fi

}

main() {
	
  delim='#'
  if ((dolist)); then
    list_kv_stores
  fi

  switch_kv_current $user, $tenant

}

format_api_json() {

	if ((savechanges)); then

		kvset current "$1"

		echo "Cache successfully updated and saved to    $AGAVE_CACHE_DIR/current";
	fi

  json_prettyify "${1}"
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-l"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -u|--user) shift; user=$1 ;;
    -t|--tenant) shift; tenant=$1 ;;
    -r|--refresh) shift; refresh=1 ;;
    -c|--create) shift; create=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -l|--list) dolist=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
