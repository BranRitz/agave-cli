#!/bin/bash
# 
# files-pems-list
# 
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It provides a mechanism for setting user permissions on a file or folder.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey username permission)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]... [JOB_ID]

Edit user permissions on a file or folder. For all but iRODS systems, these 
permissions are set at the API level and do not reflect *nix or other file 
system ACL. On iRODS systems, if the system.storageConfig.mirror attribute 
is set to true then any permissions set via the API will be mirrored onto 
the remote system. 

Also remember that no permissions can be set on public files and folders.

 Options:
  -s, --apisecret   API secret for authenticating
  -k, --apikey      API key for authenticating, its recommended to insert
                    this through the interactive option
  -U, --username	The user whose permissions should be listed
  -P, --permission	The permission to set
  -S, --systemId	Specify the system id
  -H, --hosturl     URL of the service
  -d, --development Run in dev mode using default dev server
  -f, --force       Skip all user interaction
  -i, --interactive Prompt for values
  -q, --quiet       Quiet (no output)
  -v, --verbose     Output more
  -h, --help        Display this help and exit
      --version     Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/files-common.sh"

main() {
	#echo -n
	#set -x
	
	if [ -z "$args" ]; then
		err "Please specify a valid file path for which to retrieve permissions"
	else
	
		if [ -n "$systemId" ]; then
			filesurl="${hosturl}pems/system/${systemId}/${args}?pretty=true"
		else
			filesurl="${hosturl}pems/${args}?pretty=true"
		fi
		
		cmd="curl -sku \"$apisecret:XXXXXX\" -X POST -d \"username=${username}&permission=${permission}\" ${filesurl}"

		log "Calling $cmd"
		
		response=`curl -sku "$apisecret:$apikey" -X POST -d "username=${username}&permission=${permission}" "${filesurl}"`
	
		check_response_status "$response"
	
		if [ "$response_status" = "success" ]; then
			format_api_json "$response"
		else
			jsonval response_message "$response" "message" 
			err "$response_message"
		fi
	fi	
	
}

format_api_json() {
	if ((verbose)); then
		echo "$1"
	else
		result=`echo "$1"  | grep -E '^ +"username"' | perl -pe "s/\"username\" ://; s/\"//g; s/,/\n/; s/ //g; "`
		success "${result}"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) out "$(basename $0) $version"; safe_exit ;;
    -s|--apisecret) shift; apisecret=$1 ;;
    -k|--apikey) shift; apikey=$1 ;;
    -U|--username) shift; username=$1 ;;
    -P|--permission) shift; permission=$1 ;;
    -S|--systemId) shift; systemId=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"

