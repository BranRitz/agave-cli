#!/bin/bash
# 
# postit-create
# 
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# Lists all active PostIts for the authenticated user.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# set to 1 to prevent using cache. token creation requires a valid key
disable_cache=1
noauth=0

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTIONS]... [POSTIT]

Lists all active PostIts for the authenticated user.

 Options:
  -s, --apisecret   API secret for authenticating
  -k, --apikey      API key for authenticating, its recommended to insert
                    this through the interactive option
  -H, --hosturl     URL of the service
  -d, --development Run in dev mode using default dev server
  -f, --force       Skip all user interaction
  -i, --interactive Prompt for values
  -q, --quiet       Quiet (no output)
  -v, --verbose     Verbose output
  -V, --veryverbose Very verbose output
  -h, --help        Display this help and exit
      --version     Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

filter_service_url() {
	if [[ -z $hosturl ]]; then
		if ((development)); then 
			hosturl="http://localhost/postit-v2"
		else
			hosturl="$baseurl/postits"
		fi
	fi
}

main() {
	#echo -n
	#set -x
	
	local post_options='';
	
	if [ -n "$args" ]; then
		hosturl="${hosturl}/${args}"
	fi
	
	cmd="curl -sku \"$apisecret:XXXXXX\" ${hosturl}?pretty=true"

	if ((veryverbose)); then
			log "Calling $cmd"
		fi

	response=`curl -sku "$apisecret:$apikey" "${hosturl}?pretty=true"`
	
	if [[ $(jsonquery "$response" "status") = 'success' ]]; then
		result=$(format_api_json "$response")
		success "$result"
	else
		err $(jsonquery "$response" "message")
	fi	
}

format_api_json() {
	
	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		echo "${result}" | python -mjson.tool
	else
		result=$(jsonquery "$1" "result.[]._links.self.href"
   		echo "${result}"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-i"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) out "$(basename $0) $version"; safe_exit ;;
    -s|--apisecret) shift; apisecret=$1 ;;
    -k|--apikey) shift; apikey=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"

