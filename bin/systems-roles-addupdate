#!/bin/bash
# 
# systems-roles-addupdate
# 
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# Provides a mechanism for adding and updating user roles on a system.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey username role)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]... [SYSTEM_ID]

Provides a mechanism for adding and updating user roles on a system. 
Setting a role to empty or NONE deletes the user's rold on the system.

 Options:
  -s, --apisecret   API secret for authenticating
  -k, --apikey      API key for authenticating, its recommended to insert
                    this through the interactive option
  -u, --username	The user whose permissions should be set
  -r, --role	    The role to set for the user. Valid roles are USER, 
                    PUBLISHER, ADMIN, and OWNER
  -h, --hosturl     URL of the service
  -d, --development Run in dev mode using default dev server
  -f, --force       Skip all user interaction
  -i, --interactive Prompt for values
  -q, --quiet       Quiet (no output)
  -v, --verbose     Output more
  -h, --help        Display this help and exit
      --version     Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/systems-common.sh"

main() {
	#echo -n
	#set -x
	
	if [ -z "$args" ]; then
		err "Please specify a valid system id for which to retrieve the user roles"
	else
		cmd="curl -sku \"$apisecret:XXXXXX\" -X POST -d \"role=$role\" $hosturl$args/roles/$username"

		log "Calling $cmd"
	
		response=`curl -sku "$apisecret:$apikey" -X POST -d "role=$role" "$hosturl$args/roles/$username"`
		
		check_response_status "$response"
	
		if [ "$response_status" = "success" ]; then
			format_api_json "$response"
		else
			jsonval response_message "$response" "message" 
			err "$response_message"
		fi
	fi
}

format_api_json() {
	
	if ((verbose)); then
		echo "$1" | python -mjson.tool
	else
		if [ -n "$username" ]; then
			success "Successfully updated roles for user $username on $args"
		else
			success "Successfully updated all user roles for $args"
		fi
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) out "$(basename $0) $version"; safe_exit ;;
    -s|--apisecret) shift; apisecret=$1 ;;
    -k|--apikey) shift; apikey=$1 ;;
    -u|--username) shift; username=$1 ;;
    -r|--role) shift; role=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"

