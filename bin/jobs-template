#!/bin/bash
#
# jobs-template
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It takes an app id as an argument and generates a job submission form.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(access_token apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...
$(basename $0) [OPTION]... [APP_ID]

Creates a JSON job submission template for the given app id. Additional
options and flags can be used to set defaults and create more verbose
job descriptions.


 Options:
  -z, --access_token    Access token
  -N, --name            Use the provided name for the job
  -E, --empty           Do not insert default values into the jobtemplate
  -A, --allfields       Include all fields in the job template
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --verbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/apps-common.sh"

main() {
	#echo -n
	#set -x

  if [ -z "$args" ]; then
    err "Please specify an app on which to base the job template"
	else

    if ((development)); then
      debug_flag='-d'
    fi

    # Pull in the full app description to get the info and references for
    # the job template
    if ((verbose)); then
      [ "$piped" -eq 0 ] && log "Fetching app description for $args"
    fi
    app_description=$(apps-list $debug_flag -v $args)

    if ((veryverbose)); then
      [ "$piped" -eq 0 ] && log "$app_description"
    fi

    # Fetch the full execution system description so we can use the default
    # queue to fill in any missing default runtime configuration info in the
    # job template.
    if ((allfields)); then

      execution_system_id=$(jsonquery "${app_description}" "executionSystem")

      if ((verbose)); then
        [ "$piped" -eq 0 ] && log "Fetching system description for execution system $execution_system_id..."
      fi
      execution_system=$(systems-list $debug_flag -v $execution_system_id)
      queue_names=(`jsonquery "${execution_system}" "queues.[].name"`)
      queue_defaults=(`jsonquery "${execution_system}" "queues.[].default"`)
      queue_memories=(`jsonquery "${execution_system}" "queues.[].maxMemoryPerNode"`)
      queue_ppns=(`jsonquery "${execution_system}" "queues.[].maxProcessorsPerNode"`)

      for i in "${queue_defaults[@]}"; do
        if [[ "$i" ==  'rue' ]] || [[ "$i" ==  'true' ]]; then
          system_default_queue_name="${queue_names[$n]}"
          system_default_queue_ppn="${queue_ppns[$n]}"
          system_default_queue_memory="${queue_memories[$n]}"
          break
        fi
      done

      queue=$(jsonquery "${app_description}" "defaultQueue")
      if [[ -z "$queue" ]] || [[ "$queue" == "null" ]]; then
        queue=$system_default_queue_name
      fi

      memoryPerNode=$(jsonquery "${app_description}" "defaultMemoryPerNode")
      if [[ -z "$memoryPerNode" ]] || [[ "$memoryPerNode" == "null" ]]; then
        memoryPerNode=$system_default_queue_memory
      fi

      nodeCount=$(jsonquery "${app_description}" "defaultNodeCount")
      if [[ -z "$nodeCount" ]] || [[ "$nodeCount" == "null" ]]; then
        nodeCount=1
      fi

      processorsPerNode=$(jsonquery "${app_description}" "defaultProcessorsPerNode")
      if [[ -z "$processorsPerNode" ]] || [[ "$processorsPerNode" == "null" ]]; then
        processorsPerNode=${system_default_queue_ppn}
      fi

      maxRunTime=$(jsonquery "${app_description}" "defaultMaxRunTime")
      if [[ -z "$maxRunTime" ]] || [[ "$maxRunTime" == "null" ]]; then
        maxRunTime="01:00:00"
      fi
    fi

    # Configure the archive info. By default we turn archiving on. For full
    # job templates we add the user's default storage system as their archive
    # system and set the path to null to force Agave to generate a default path.
    archive="true"

    if ((allfields)); then
      # Look up the user's default storage system to fill out the archive info
      if ((verbose)); then
        [ "$piped" -eq 0 ] && log "Fetching default storage system description..."
      fi
      default_system=$(systems-list $debug_flag -D -S -v )


      archivePath="null"
      archiveSystem=$(jsonquery "$default_system" "[].id")
    fi

    # Create the inputs object. Hidden inputs are not included. Optional
    # inputs are only included when the full template is requested. If a
    # default value is given in the app description it is used, otherwise, a
    # null value is used.
    if ((verbose)); then
      [ "$piped" -eq 0 ] && log "Parsing app inputs..."
    fi
    input_ids=(`jsonquery "${app_description}" "inputs.[].id"`)
    input_defaults=(`jsonquery "${app_description}" "inputs.[].value.default"`)
    input_requireds=(`jsonquery "${app_description}" "inputs.[].value.required"`)
    input_visibles=(`jsonquery "${app_description}" "inputs.[].value.visible"`)
    input_count=${#input_ids[@]}

    n=0
    for i in "${input_ids[@]}"; do

      # figure out fencepost comma problem
      if [[ "$input_count" -eq "$[n+1]" ]]; then
        trailingcomma=''
      else
        trailingcomma=','
      fi

      if [[ "${input_visibles[$n]}" == "rue" ]] || [[ "${input_visibles[$n]}" == "true" ]]; then
        if [[ "${input_requireds[$n]}" == "rue" ]] || [[ "${input_requireds[$n]}" == "true" ]] || [[ "$allfields" == 1 ]]; then
          if [[ "${input_defaults[$n]}" == "null" ]]; then
            inputs=$(printf "%s\n    \"%s\": %s%s" "$inputs" "$i" "null" "$trailingcomma")
          else
            inputs=$(printf "%s\n    \"%s\": \"%s\"%s" "$inputs" "$i" "${input_defaults[$n]}" "$trailingcomma")
          fi
        fi
      fi

      n=$[n+1]

    done

    # Create the parameters object. Hidden parameters are not included. Optional
    # parameters are only included when the full template is requested. If a
    # default value is given in the app description it is used, otherwise, an
    # appropriate value for the parameter's type is used.
    if ((verbose)); then
      [ "$piped" -eq 0 ] && log "Parsing app parameters..."
    fi
    parameter_ids=(`jsonquery "$app_description" "parameters.[].id"`)
    parameter_defaults=(`jsonquery "$app_description" "parameters.[].value.default"`)
    parameter_requireds=(`jsonquery "$app_description" "parameters.[].value.required"`)
    parameter_visibles=(`jsonquery "$app_description" "parameters.[].value.visible"`)
    parameter_types=(`jsonquery "$app_description" "parameters.[].value.type"`)
    parameter_count=${#parameter_ids[@]}

    n=0
    for i in "${parameter_ids[@]}"; do

      # figure out fencepost comma problem
      if [[ "$parameter_count" -eq "$[n+1]" ]]; then
        trailingcomma=''
      else
        trailingcomma=','
      fi

      if [[ "${parameter_visibles[$n]}" == "rue" ]] || [[ "${parameter_visibles[$n]}" == "true" ]]; then
        if [[ "${parameter_requireds[$n]}" == "rue" ]] || [[ "${parameter_requireds[$n]}" == "true" ]] || [[ "$allfields" == 1 ]]; then
          if [[ "${parameter_defaults[$n]}" == "null" ]]; then
            if [[ "${parameter_types[$n]}" == "string" ]]; then
              parameters=$(printf "%s\n    \"%s\": \"\"%s" "$parameters" "$i" "$trailingcomma")
            elif [[ "${parameter_types[$n]}" == "bool" ]] || [[ "${parameter_types[$n]}" == "flag" ]]; then
              parameters=$(printf "%s\n    \"%s\": %s%s" "$parameters" "$i" "true" "$trailingcomma")
            elif [[ "${parameter_types[$n]}" == "number" ]]; then
              parameters=$(printf "%s\n    \"%s\": %s%s" "$parameters" "$i" "1234567890" "$trailingcomma")
            else
              parameters=$(printf "%s\n    \"%s\": %s%s" "$parameters" "$i" "null" "$trailingcomma")
            fi
          else
            if [[ "${parameter_types[$n]}" == "string" ]]; then
              parameters=$(printf "%s\n    \"%s\": \"%s\"%s" "$parameters" "$i" "${parameter_defaults[$n]}" "$trailingcomma")
            else
              parameters=$(printf "%s\n    \"%s\": %s%s" "$parameters" "$i" "${parameter_defaults[$n]}" "$trailingcomma")
            fi
          fi
        fi
      fi

      n=$[n+1]

    done

    # Create the notifications array when full templates are requested. This will
    # add two notifications to the job. One for FINISHED and one for FAILED. The
    # user's email address is looked up and used as the callback address.
    if ((allfields)); then
      if ((verbose)); then
        [ "$piped" -eq 0 ] && log "Fetching your profile description..."
      fi
      profiles_description=$(profiles-list $debug_flag -v me)
      user_email=$(jsonquery "$profiles_description" "email")

      if ((verbose)); then
        [ "$piped" -eq 0 ] && log "Creating notifications..."
      fi
      notifications=$(printf "    {\n      \"url\":\"%s\",\n      \"event\":\"FINISHED\",\n      \"persistent\":false\n    },\n    {\n      \"url\":\"%s\",\n      \"event\":\"FINISHED\",\n      \"persistent\":false\n    }" "$user_email" "$user_email")
    fi

    # Allow the user to pass in a job name by default. Otherwise, generate one
    # derived from the job id
    if [[ -z "$name" ]]; then
      timestamp=$(date +%s)
      name="$(jsonquery "$app_description" "name") test-$timestamp"
    fi

    if ((verbose)); then
      [ "$piped" -eq 0 ] && log "Building job template..."
    fi

    if ((allfields)); then
      printf "{\n  \"name\":\"%s\",\n  \"appId\": \"%s\",\n  \"batchQueue\": \"%s\",\n  \"executionSystem\": \"%s\",\n  \"maxRunTime\": \"%s\",\n  \"memoryPerNode\": \"%sGB\",\n  \"nodeCount\": %s,\n  \"processorsPerNode\": %s,\n  \"archive\": %s,\n  \"archiveSystem\": \"%s\",\n  \"archivePath\": %s,\n  \"inputs\": {%s\n  },\n  \"parameters\": {%s\n  },\n  \"notifications\": [\n%s\n  ]\n}\n" "$name" "$args" "$queue" "$execution_system_id" "$maxRunTime" "$memoryPerNode" "$nodeCount" "$processorsPerNode" "$archive" "$archiveSystem" "$archivePath" "$inputs" "$parameters" "$notifications"
    else
      printf "{\n  \"name\": \"%s\",\n  \"appId\": \"%s\",\n  \"archive\": %s,\n  \"inputs\": {%s\n  },\n  \"parameter\": {%s\n  }\n}\n" "$job_name" "$args" "$archive" "$inputs" "$parameters"
    fi

    if ((verbose)); then
      [ "$piped" -eq 0 ] && log "All done!!"
    fi

  fi
}


##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -N|--name) shift; name=$1 ;;
    -E|--empty) shift; empty=$1 ;;
    -A|--allfields) allfields=1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--verbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
