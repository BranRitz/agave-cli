},\n    {\n      \"url\":\"%s\",\n      \"event\":\"FAILED\",\n      \"persistent\":false\n    }" "$webhookurl" "$user_email" "$user_email")
            fi
        fi

        # Allow the user to pass in a job name by default. Otherwise, generate one
        # derived from the job id
        if [[ -z "$name" ]]; then
            timestamp=$(date +%s)
            job_name="$(jsonquery "$app_description" "name") test-$timestamp"
        fi

        if ((verbose)); then
            [ "$piped" -eq 0 ] && log "Building job template..."
        fi

        if ((allfields)); then
            printf "{\n  \"name\":\"%s\",\n  \"appId\": \"%s\",\n  \"batchQueue\": \"%s\",\n  \"executionSystem\": \"%s\",\n  \"maxRunTime\": \"%s\",\n  \"memoryPerNode\": \"%sGB\",\n  \"nodeCount\": %s,\n  \"processorsPerNode\": %s,\n  \"archive\": %s,\n  \"archiveSystem\": \"%s\",\n  \"archivePath\": %s,\n  \"inputs\": {%s\n  },\n  \"parameters\": {%s\n  },\n  \"notifications\": [\n%s\n  ]\n}\n" "$job_name" "$args" "$queue" "$execution_system_id" "$maxRunTime" "$memoryPerNode" "$nodeCount" "$processorsPerNode" "$archive" "$archiveSystem" "$archivePath" "$inputs" "$parameters" "$notifications"
        else
            printf "{\n  \"name\": \"%s\",\n  \"appId\": \"%s\",\n  \"archive\": %s,\n  \"inputs\": {%s\n  },\n  \"parameter\": {%s\n  }\n}\n" "$job_name" "$args" "$archive" "$inputs" "$parameters"
        fi

        if ((verbose)); then
            [ "$piped" -eq 0 ] && log "All done!!"
        fi

    fi
}

function generateDefaults {

    default_values=''
    tmp_val=''

    asdfasdfasd="$1 $2 $3 $4"
    # $1 target value type
    value_type=$1
    shift;

    # $2 minCardinality
    min_card=$1
    if [[ -z "$min_card" ]]; then
        min_card=1
    fi
    shift;

    # $3 maxCardinality
    if [[ -z "$1" ]]; then
        max_card=1
        elif [[ "$1" -eq -1 ]]; then
        max_card=5
    else
        max_card=$1
    fi
    shift;

    # $4 enumValues
    if [[ -z "$1" ]]; then
        enum_values=("")
    else
        enum_values=("$@")

    fi
    enum_count="${#enum_values[@]}"

    if [[ "$value_type" == "bool" ]] || [[ "$value_type" == "flag" ]]; then

        echo "true"

    else
        # if they want all fields to show, we'll populate it up to the max number of values
        if ((allfields)); then
            value_range=$(eval echo {$min_card..$max_card})
            # otherwise, we'll use the min
        else
            value_range=$(eval echo {$0..$min_card})
        fi

        for i in $value_range; do
            tmp_val=''
            if [[ "$value_type" == "integer" ]]; then
                tmp_val=$(( ( RANDOM % 100000 )  + 1 ))
                elif [[ "$value_type" == "decimal" ]]; then
                tmp_int=$(( ( RANDOM % 10000 )  + 1 ))
                tmp_dec=$(( ( RANDOM % 1000 )  + 1 ))
                tmp_val=$tmp_int.$tmp_dec
                elif [[ "$value_type" == "number" ]]; then
                tmp_val=$(( ( RANDOM % 100000 )  + 1 ))
                elif [[ "$value_type" == "input" ]]; then
                seed=$(( ( RANDOM % 2 ) + 1 ))
                # get a random agave url for the user
                tmp_fname=`head -c 10 /dev/urandom | base64`
                tmp_fname=${tmp_fname%\/}
                if [[ "$seed" -eq 1 ]]; then
                    # get a random meme url from imgur
                    tmp_val="http://lorempixel.com/640/480/sports/?key=${tmp_fname:0:12}"
                    elif [[ "$seed" -eq 2 ]]; then
                    tmp_val="agave://${archiveSystem}/${username}/inputs/${tmp_fname:0:12}.dat"
                else
                    tmp_val="${username}/inputs/${tmp_fname:0:12}.dat"
                fi
                elif [[ "$value_type" == "enumeration" ]]; then
                enumindex=$(( ( RANDOM % $enum_count ) ))
                tmp_val=${enum_values[$enumindex]}
            else
                tmp_val=`head -c 10 /dev/urandom | base64`
                tmp_val=${tmp_val%\/}
                tmp_val="${tmp_val:0:7}"
            fi

            default_values="$tmp_val $default_values"
        done

        if [[ "$max_card" -eq 1 ]]; then
            echo ${default_values% }
        else
            echo $default_values
        fi
    fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
    case $1 in
        -h|--help) usage >&2; safe_exit ;;
        --version) version; copyright; disclaimer; safe_exit ;;
        -z|--access_token) shift; access_token=$1 ;;
        -N|--name) shift; name=$1 ;;
        -E|--empty) shift; empty=$1 ;;
        -A|--allfields) allfields=1 ;;
        -C|--cache) cache=1 ;;
        -H|--hosturl) shift; hosturl=$1;;
        -d|--development) development=1 ;;
        -v|--verbose) verbose=1 ;;
        -V|--veryverbose) veryverbose=1; verbose=1 ;;
        -q|--quiet) quiet=1 ;;
        -i|--interactive) interactive=1 ;;
        -f|--force) force=1 ;;
        --endopts) shift; break ;;
        *) die "invalid option: $1" ;;
    esac
    shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
