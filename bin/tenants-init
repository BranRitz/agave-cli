#!/bin/bash
#
# auth-context-config
#
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It configures the cli by prompting the user for tenant info
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

tenantid=
baseurl=
devurl=

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=()

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...

Configure the context of the cli by selecting the tenant and setting the
base url

 Options:
  -t, --tenant          The tenant id to use, ex iplantc.org
  -b, --backup          Backup the previous config before setting the new one.
                        The current config will be stored as $AGAVE_CACHE_DIR/backup
  -r, --restore         Sets the backed up config as current config and deletes the backup
  -s, --swap            Swaps the current and backup configs, preserving both
  -d, --developmenturl  The development tenant, ex https://agave-dev.iplantc.org
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/tenants-common.sh"

main() {
	#echo -n
	#set -x

  if ((restore)); then
    kvset current $(kvget backup)
    kvdel backup

  elif ((swap)); then
    kvset backup2 $(kvget current)
    kvset current $(kvget backup)
    kvset backup $(kvget backup2)
    kvdel backup2

  elif [ -z "$tenant" ]; then
    tenantresponse=$(curl -sk ${hosturl%/}/)
    oldIFS="$IFS"
    #tenantids=$(jsonquery "${tenantresponse}" "result.[].tenantId")
    IFS='
    '
    IFS=${IFS:0:1} # this is useful to format your code with tabs
    tenantids=( $(jsonquery "${tenantresponse}" "result.[].tenantId") )
    tenanturls=( $(jsonquery "${tenantresponse}" "result.[].baseUrl") )
    IFS="$oldIFS"

    #tenanturls=$(jsonquery "${tenantresponse}" "result.[].baseUrl")
    #IFS=', ' read -a tenanturls <<< ${tenanturls[@]}

    echo "Please select a tenant from the following list:"
    for i in "${!tenantids[@]}"
    do
      echo "[$i] ${tenantids[$i]}"
    done

    echo -n "Your choice [2]: "
    eval "read tenant"

    if [[ -z "$tenant" ]]; then
      tenant="iplantc.org"
    fi

    # echo "$tenantids"
    re='^[0-9]+$'
    if [[ "$tenant" =~ $re ]] ; then
      if [ $tenant -ge ${#tenantids[@]} ]; then
        err "Invalid choice. Please select a valid number from 1-${#tenantids[@]}";
        exit
      else
        tenant="${tenantids[$tenant]}"
      fi
    fi
  fi

  # validate the tenant id
  for i in "${!tenantids[@]}"
  do
    if [[ "$tenant" == "${tenantids[$i]}" ]]; then
      tenantid="${tenantids[$i]}"
      baseurl="${tenanturls[$i]}"
      break
    fi
  done

  if [ -z "$tenantid" ]; then
    err "Unknown tenant id. Please provide a valid tenant id to initialize the cli."
    exit
  fi

  # set the dev url in case they provide one
  if [ -z "$developmenturl" ]; then
    devurl="http://localhost:8080"
  fi

  # backup the old config if present
  if ((backup)); then
    kvset backup $(kvget current)
  fi

  # save the tenant config. backing up the previous one
  kvset current "{\"tenantid\":\"$tenantid\",\"baseurl\":\"$baseurl\",\"devurl\":\"$developmenturl\",\"apisecret\":\"$client_secret\",\"apikey\":\"$client_key\",\"username\":\"$apiusername\",\"access_token\":\"\",\"refresh_token\":\"\",\"created_at\":\"\",\"expires_in\":\"\"}"

  success "You are now configured to interact with the APIs at $baseurl"
}

format_api_json() {

	if [[ $verbose -eq 1 ]]; then
		echo "$1" | python -mjson.tool
	else
		success "Current token for $username valid for another $time_left seconds"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-i"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -t|--tenant) shift; tenant=$1 ;;
    -b|--backup) backup=1 ;;
    -r|--restore) restore=1;;
    -s|--swap) swap=1;;
    -d|--developmenturl) shift; developmenturl=$1 ;;
    -v|--verbose) verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
