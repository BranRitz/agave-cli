#!/bin/bash
# 
# files-get
# 
# author: dooley@tacc.utexas.edu
#
# This script is part of the Agave API command line interface (CLI).
# It downloads a file listing from a remote system.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]... [PATH]

Downloads a remote file. Regardless of the remote protocol used to access the 
system, the file will be downloaded over HTTP. Keep this in mind for larger 
files. If no system is specified, your default storage system will be used. 
By specifying a system, the path given will be resolved on that remote system. 
Note that the system id, not hostname must be given. 

 Options:
  -s, --apisecret   API secret for authenticating
  -k, --apikey      API key for authenticating, its recommended to insert
                    this through the interactive option
  -S, --systemId	Specify the system id
  -N, --filename	Name by which the local file should be saved
  -P, --print		Print contents to stdout
  -H, --hosturl     URL of the service
  -d, --development Run in dev mode using default dev server
  -f, --force       Skip all user interaction
  -i, --interactive Prompt for values
  -q, --quiet       Quiet (no output)
  -v, --verbose     Output more
  -h, --help        Display this help and exit
      --version     Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/files-common.sh"

main() {
	#echo -n
	#set -x
	
	if [  -z "$args" ]; then
		err "Please specify a valid file path to download. Directory downloads are not yet supported."
	else
		
		if [ -n "$systemId" ]; then
			filesurl="${hosturl}media/system/${systemId}/${args}"
		else
			filesurl="${hosturl}media/${args}"
		fi
	
		if [ -n "$print" ]; then
			outputarg=" "
		elif [ -n "$filename" ]; then
			outputarg="-o$filename"
		else
			outputarg="-O"
		fi
	
		cmd="curl -ku \"$apisecret:XXXXXX\" ${outputarg} ${filesurl}"

		log "Calling $cmd"
	
		curl -ku "$apisecret:$apikey" "${outputarg}" "${filesurl}"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"

# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) out "$(basename $0) $version"; safe_exit ;;
    -s|--apisecret) shift; apisecret=$1 ;;
    -k|--apikey) shift; apikey=$1 ;;
    -S|--systemId) shift; systemId=$1 ;;
    -N|--filename) shift; filename=$1 ;;
    -P|--print) print=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"

